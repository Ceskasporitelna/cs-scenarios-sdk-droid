import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode readVersionCode()
        versionName readVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-proguard-rules.pro"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "cs-scenarios-sdk-release-" + defaultConfig.versionName + ".aar"
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs') // gson jar
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:rules:0.5'
}

// maven pom specs

group = 'cz.csas'
version = readVersionName()

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'cs-scenarios-sdk'
                description = 'Scenarios SDK project powered by Ceska Sporitelna a.s.'
                url 'https://github.com/Ceskasporitelna/cs-scenarios-sdk-droid'

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'hauseja3'
                        name 'Jan Hauser'
                        email 'jan.hauser@applifting.cz'
                    }
                }
                scm {
                    connection 'https://github.com/Ceskasporitelna/cs-scenarios-sdk-droid.git'
                    developerConnection 'https://github.com/Ceskasporitelna/cs-scenarios-sdk-droid.git'
                    url 'https://github.com/Ceskasporitelna/cs-scenarios-sdk-droid'
                }
            }
        }
    }
}

// Thanks to https://medium.com/@kmlong1183/using-fastlane-tools-and-android-2e8d76bb138b#.ew4kj88sa

def readVersionName() {
    def version = readVersion()
    return "${version["major"]}.${version["minor"]}.${version["patch"]}"
}

def readVersionCode() {
    def version = readVersion()
    def patch = version["patch"] as int
    return patch
}

def readVersion() {
    def versionFile = new File(project.rootDir, "version.properties")
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }

    // safety defaults
    if (!version["major"]) version["major"] = "1"
    if (!version["minor"]) version["minor"] = "0"
    if (!version["patch"]) version["patch"] = "0"
    return version
}

def incrementBuildVersion(def type = "patch") {
    def version = readVersion()

    def major = version["major"] as int
    def minor = version["minor"] as int
    def patch = version["patch"] as int

    if (type == "major") {
        major++
        minor = 0
        patch = 0
    } else if (type == "minor") {
        minor++
        patch = 0
    } else if (type == "patch") {
        patch++
    }

    version["major"] = major.toString()
    version["minor"] = minor.toString()
    version["patch"] = patch.toString()

    // write into version.properties

    def versionFile = new File(project.rootDir, "version.properties")
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    // fix descriptor.json bintray file version

    def descriptorFile = new File(project.rootDir, "descriptor.json")
    def descriptor = new JsonSlurper().parse(descriptorFile)
    def versionName = major + "." + minor + "." + patch
    def projectName = descriptor.files[0].uploadPattern.split("/")[2];
    def path = "cz/csas/" + projectName + "/" + versionName + "/";

    descriptor.version.name = versionName
    descriptor.version.vcs_tag = versionName
    descriptor.version.released = new Date().format('yyyy-MM-dd')

    descriptor.files[0].uploadPattern = path + "\$1";
    descriptor.files[1].uploadPattern = path + projectName + "-" + versionName + ".aar";
    descriptor.files[2].uploadPattern = path + projectName + "-" + versionName + ".pom";

    descriptorFile.write(new JsonBuilder(descriptor).toPrettyString())

    println "Version is now: {" + versionName + "}"
}

task doMajorVersionIncrement << {
    println "Incrementing major version..."
    incrementBuildVersion("major")
}

task doMinorVersionIncrement << {
    println "Incrementing minor version..."
    incrementBuildVersion("minor")
}

task doPatchVersionIncrement << {
    println "Incrementing patch version..."
    incrementBuildVersion("patch")
}

// generate the javadoc and sources https://code.tutsplus.com/tutorials/creating-and-publishing-an-android-library--cms-24582#

task sourcesJar(type: Jar) {
    baseName = "cs-scenarios-sdk"
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = "cs-scenarios-sdk"
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}